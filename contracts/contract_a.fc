#include "imports/stdlib.fc";
#include "imports/constants.fc";

;; storage variables
global slice owner;
global slice contract_b_address;

;; load_data populates storage variables using stored data
() load_data() impure inline {
    var ds = get_data().begin_parse();
    owner = ds~load_msg_addr();
    contract_b_address = ds~load_msg_addr();
    ds.end_parse();
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; this operation needs to mutate an nft with an index
    if (op == op::mutate) {
        ;; parse incoming data
        var (callback_op, index, data) = (in_msg_body~load_uint(32),
            in_msg_body~load_uint(64), in_msg_body.load_ref());

        ;; message to be received by contract C
        var msg_dst = begin_cell()
            .store_uint(callback_op, 32)
            .store_slice(sender_address)
            .store_ref(data)
            .end_cell();

        ;; message to be parsed by contract_b
        var msg_wrapped = begin_cell()
                .store_uint(index, 64)
                .store_uint(op::changeCounter)
                .store_ref(msg_dst)
                .end_cell();

        ;; raw message of ton blockchain
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(contract_b_address)
            .store_coins(0)
            .store_uint(0, 106)
            .store_uint(1, 1)
            .store_ref(begin_cell()
                .store_uint(op::conveyToC, 32)
                .store_uint(query_id, 64)
                .store_ref(msg_wrapped)
                .end_cell()
            )
            .end_cell();

        ;; send the raw message to the blockchain
        send_raw_message(msg, 64);
        return ();
    }

    if (op == op::refund) {
        var (callback_op, q_id, sender) = (in_msg_body~load_uint(32),
            in_msg_body~load_uint(64), in_msg_body~load_msg_addr());
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(0)
            .store_uint(0, 106)
            .store_uint(1, 1)
            .store_ref(begin_cell()
                .store_uint(callback_op, 32)   ;; op
                .store_uint(q_id, 64)
                .end_cell())
            .end_cell(),
            64);
        return ();
    }

    if (op == op::onMutateCompleted) {
        var (callback_op, q_id, sender, result) = (in_msg_body~load_uint(32),
            in_msg_body~load_uint(64), in_msg_body~load_msg_addr(), in_msg_body.load_ref());
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(0)
            .store_uint(0, 106)
            .store_uint(1, 1)
            .store_ref(begin_cell()
                .store_uint(callback_op, 32)   ;; op
                .store_uint(q_id, 64)
                .store_ref(result)
                .end_cell())
            .end_cell(),
            64);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}